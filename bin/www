#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("esnmember3:server");
var http = require("http");
var https = require('https');
var selfsigned = require('selfsigned');
var fs = require('fs');

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

if (process.env.ENABLE_HTTPS === "TRUE") {
  generateCertificates();

  var sslOptions = {
    key: fs.readFileSync('./cert/key.pem'),
    cert: fs.readFileSync('./cert/cert.pem')
  };

  var server = https.createServer(sslOptions, app);
} else {
  var server = http.createServer(app);
}

server.listen(port, function() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;

  console.log('Listening on ' + bind);
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Certificate generation function.
 */

function generateCertificates() {
  if (!fs.existsSync('./cert/cert.pem')) {
    console.log("Certificate not found, generating a new one...");
    var attrs = [{ name: 'commonName', value: 'localhost' }];
    var pems = selfsigned.generate(attrs, { days: 365 });

    if (!fs.existsSync('/cert')) fs.mkdirSync('./cert');

    fs.writeFileSync('./cert/key.pem', pems.private);
    fs.writeFileSync('./cert/cert.pem', pems.cert);
    console.log("SSL certificate generated...");
  } else {
    console.log("SSL certificate found");
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
